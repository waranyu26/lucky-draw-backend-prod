{"version":3,"sources":["../../src/passport/passport-config.js"],"sourcesContent":["// import LocalStrategy from 'passport-local.Strategy';\n// import bcrypt from 'bcrypt';\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local');\nconst bcrypt = require('bcrypt');\n// import { logger, stream } from '@utils/logger';\n\nfunction initialize(passport, getUser, getUserById) {\n    const authenticateUser = async(username, password, done) => {\n        const userProfile = await getUser(username)\n\n        if (userProfile == null) {\n            console.log(\"no user\")\n            return done(null, false, { message: 'Invalid User!' })\n        }\n\n        const usernameFromDB = userProfile.username\n        const passwordFromDB = userProfile.password\n\n        try {\n            if (await bcrypt.compare(password, passwordFromDB)) {\n                console.log(`${Date.now()} info: =================================`);\n                console.log(`${Date.now()} info: ===== 🎖️  Authenticated 🎖️ ======`);\n                console.log(`${Date.now()} info: >> ${username}`);\n                console.log(`${Date.now()} info: =================================`);\n\n                return done(null, userProfile);\n\n            } else {\n                console.log('password fail')\n                return done(null, false, \"Incorrect Password!\");\n            }\n\n        } catch (error) {\n            console.log(\"ERROR yeeeeeeeeeeeeeeeeeeeeeee\")\n            console.log(error);\n            return done(error)\n        }\n    }\n\n    passport.use(new LocalStrategy(authenticateUser))\n    passport.serializeUser((user, done) => done(null, user.id))\n    passport.deserializeUser(async(id, done) => {\n        return done(null, await getUserById(id))\n    })\n}\n\nmodule.exports = initialize"],"names":["passport","require","LocalStrategy","bcrypt","initialize","getUser","getUserById","authenticateUser","username","password","done","userProfile","console","log","message","usernameFromDB","passwordFromDB","compare","Date","now","error","use","serializeUser","user","id","deserializeUser","module","exports"],"mappings":"AAEA;AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC,AAAC;AACrC,MAAMC,aAAa,GAAGD,OAAO,CAAC,gBAAgB,CAAC,AAAC;AAChD,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAQ,CAAC,AAAC;AAGjC,SAASG,UAAU,CAACJ,QAAQ,EAAEK,OAAO,EAAEC,WAAW,EAAE;IAChD,MAAMC,gBAAgB,GAAG,OAAMC,QAAQ,EAAEC,QAAQ,EAAEC,IAAI,GAAK;QACxD,MAAMC,WAAW,GAAG,MAAMN,OAAO,CAACG,QAAQ,CAAC;QAE3C,IAAIG,WAAW,IAAI,IAAI,EAAE;YACrBC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;YACtB,OAAOH,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE;gBAAEI,OAAO,EAAE,eAAe;aAAE,CAAC,CAAA;QAC1D,CAAC;QAED,MAAMC,cAAc,GAAGJ,WAAW,CAACH,QAAQ;QAC3C,MAAMQ,cAAc,GAAGL,WAAW,CAACF,QAAQ;QAE3C,IAAI;YACA,IAAI,MAAMN,MAAM,CAACc,OAAO,CAACR,QAAQ,EAAEO,cAAc,CAAC,EAAE;gBAChDJ,OAAO,CAACC,GAAG,CAAC,CAAC,EAAEK,IAAI,CAACC,GAAG,EAAE,CAAC,wCAAwC,CAAC,CAAC,CAAC;gBACrEP,OAAO,CAACC,GAAG,CAAC,CAAC,EAAEK,IAAI,CAACC,GAAG,EAAE,CAAC,wCAAwC,CAAC,CAAC,CAAC;gBACrEP,OAAO,CAACC,GAAG,CAAC,CAAC,EAAEK,IAAI,CAACC,GAAG,EAAE,CAAC,UAAU,EAAEX,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAClDI,OAAO,CAACC,GAAG,CAAC,CAAC,EAAEK,IAAI,CAACC,GAAG,EAAE,CAAC,wCAAwC,CAAC,CAAC,CAAC;gBAErE,OAAOT,IAAI,CAAC,IAAI,EAAEC,WAAW,CAAC,CAAC;YAEnC,OAAO;gBACHC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;gBAC5B,OAAOH,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,qBAAqB,CAAC,CAAC;YACpD,CAAC;QAEL,EAAE,OAAOU,KAAK,EAAE;YACZR,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;YAC7CD,OAAO,CAACC,GAAG,CAACO,KAAK,CAAC,CAAC;YACnB,OAAOV,IAAI,CAACU,KAAK,CAAC,CAAA;QACtB,CAAC;IACL,CAAC;IAEDpB,QAAQ,CAACqB,GAAG,CAAC,IAAInB,aAAa,CAACK,gBAAgB,CAAC,CAAC;IACjDP,QAAQ,CAACsB,aAAa,CAAC,CAACC,IAAI,EAAEb,IAAI,GAAKA,IAAI,CAAC,IAAI,EAAEa,IAAI,CAACC,EAAE,CAAC,CAAC;IAC3DxB,QAAQ,CAACyB,eAAe,CAAC,OAAMD,EAAE,EAAEd,IAAI,GAAK;QACxC,OAAOA,IAAI,CAAC,IAAI,EAAE,MAAMJ,WAAW,CAACkB,EAAE,CAAC,CAAC,CAAA;IAC5C,CAAC,CAAC;AACN,CAAC;AAEDE,MAAM,CAACC,OAAO,GAAGvB,UAAU"}