{"version":3,"sources":["../../src/services/tbl_users.service.ts"],"sourcesContent":["import { hash } from 'bcrypt';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport { HttpException } from '@exceptions/HttpException';\nimport { User } from '@interfaces/users.interface';\nimport userModel from '@models/users.model';\nimport { isEmpty } from '@utils/util';\nimport PGPool from '@/db_pool/pg_pool';\nimport { message } from '@/constants/messages';\nimport { tableUser } from '@/interfaces/tbl_user.interface';\n\nclass tableUsersService {\n\n  public pool = new PGPool();\n\n  public async findAllUsers() {\n    try {\n      const dataset = await this.pool.aquery(`\n        SELECT * FROM tbl_users \n        ORDER BY id ASC\n      `);\n      \n      return { statusCode: 200, message: message.success.ok, data: dataset.rows };\n\n    } catch (error) {\n      console.log(error);\n      return { statusCode: 500, message: message.errors.internal };\n    }\n  }\n\n  public async findUserById(userId) {\n    try {\n      const dataset = await this.pool.aquery(`\n        SELECT * FROM tbl_users\n        WHERE id = ${userId}\n      `);\n\n      if (dataset.rows.length > 0) {\n        return { statusCode: 200, message: message.success.ok, data: dataset.rows };\n      } else {\n        return { statusCode: 403, message: message.errors.notFound };\n      }\n\n    } catch (error) {\n      console.log(error);\n      return { statusCode: 500, message: message.errors.internal };\n    }\n  }\n\n  public async createUser(userProfile) {\n    try {\n      // ${userProfile.id},\n      let querySQL =`\n        INSERT INTO tbl_users (\n          username,\n          password,\n          name,\n          phone_number,\n          role_id,\n          station_id,\n          created_at,\n          updated_at,\n          password_mobile_pos\n\n        ) VALUES (\n          '${userProfile.username}',\n          '${userProfile.password}',\n          '${userProfile.name}',\n          '${userProfile.phone_number}',\n          ${userProfile.role_id},\n          ${userProfile.station_id},\n          CURRENT_TIMESTAMP(6),\n          ${null},\n          '${userProfile.password_mobile_pos}'\n      )`\n\n      // console.log(querySQL)\n      await this.pool.aquery(querySQL);\n      return { statusCode: 200, message: message.success.insert };\n\n    } catch (error) {\n      console.log(error);\n      return { statusCode: 500, message: message.errors.internal };\n    }\n  }\n\n  public async updateUser(userId, changesAsString) {\n    try {\n      let querySQL = `\n        UPDATE tbl_users\n        SET ${changesAsString}\n        WHERE id = ${userId}\n      `\n\n      // console.log(querySQL)\n      await this.pool.aquery(querySQL);\n      return { statusCode: 200, message: message.success.update };\n\n    } catch (error) {\n      console.log(error);\n      return { statusCode: 500, message: message.errors.internal };\n    }\n  }\n\n  public async deleteUser(userId) {\n    const response = await this.findUserById(userId)\n    if (response.statusCode == 403) {\n      return { statusCode: 403, message: message.errors.notFound };\n    }\n\n    try {\n      let querySQL = `\n        DELETE FROM tbl_users\n        WHERE id = ${userId}\n      `\n      // console.log(querySQL)\n      await this.pool.aquery(querySQL);\n      return { statusCode: 200, message: message.success.delete };\n\n    } catch (error) {\n      console.log(error);\n      return { statusCode: 500, message: message.errors.internal };\n    }\n  }\n\n  public async conflictUpdateCheck(id, changes) {\n    const response = await this.findUserById(id)\n    if (response.statusCode == 403) {\n      return { statusCode: 403, message: message.errors.notFound };\n    }\n\n    let userProfile = response.data[0];\n    if (changes.username != null || changes.role_id != null || changes.station_id != null) {\n      userProfile.username = changes.username == null ?\n          userProfile.username : changes.username\n      userProfile.role_id = changes.role_id == null ? \n          userProfile.role_id : changes.role_id\n      userProfile.station_id = changes.station_id == null ? \n          userProfile.station_id : changes.staion_id\n\n      return this.duplicateAddCheck(userProfile)\n    }\n\n    return null\n  }\n\n  public async duplicateAddCheck(userProfile) {\n    // add cashier\n    if (userProfile.role_id == 1) {\n      const duplicateCheck = await this.pool.aquery(`\n          SELECT count(username) FROM tbl_users\n          WHERE username = '${userProfile.username}' AND\n          role_id = 1 AND\n          station_id = ${userProfile.station_id}\n      `);\n\n      if (duplicateCheck.rows[0].count > 0) {\n          return {\n              statusCode: 500,\n              message: `cashier username already exists in the 'station ${userProfile.station_id}'`\n          }\n      }\n\n    // moderator\n    } else {\n        const duplicateCheck = await this.pool.aquery(`\n            SELECT count(username) FROM tbl_users\n            WHERE username = '${userProfile.username}' AND\n            role_id != 1\n        `);\n\n        if (duplicateCheck.rows[0].count > 0) {\n            return {\n                statusCode: 500,\n                message: `That moderator's username is already exists'`\n            }\n        }\n    }\n    return null\n  }\n}\n\nexport default tableUsersService;\n"],"names":["tableUsersService","findAllUsers","dataset","pool","aquery","statusCode","message","success","ok","data","rows","error","console","log","errors","internal","findUserById","userId","length","notFound","createUser","userProfile","querySQL","username","password","name","phone_number","role_id","station_id","password_mobile_pos","insert","updateUser","changesAsString","update","deleteUser","response","delete","conflictUpdateCheck","id","changes","staion_id","duplicateAddCheck","duplicateCheck","count","PGPool"],"mappings":"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"}