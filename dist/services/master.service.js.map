{"version":3,"sources":["../../src/services/master.service.ts"],"sourcesContent":["import {\n  MasterCondtions,\n  MasterData,\n  MasterProducts,\n  MasterPromotions,\n  MasterTemplates,\n  MasterUsers,\n  MasterTemplateDetails,\n} from '@/interfaces/master.interface';\nimport PGPool from '@/db_pool/pg_pool';\nimport { message } from '@/constants/messages';\nimport { Station } from '@/interfaces/station.interface';\nimport { ResponsePattern } from '@/interfaces/response.interface';\nimport ProductService from './product.service';\nimport StationService from './station.service';\n\nclass MasterService {\n  public productService = new ProductService();\n  public stationService = new StationService();\n\n  public async getConditionsData(\n    idxCondition: number,\n    conditions: Array<MasterCondtions>,\n    promotion: MasterPromotions,\n  ): Promise<[number, Array<MasterCondtions>]> {\n    // match between promotion and conditions\n    const result: Array<MasterCondtions> = [];\n    while (idxCondition < conditions.length) {\n      if (conditions[idxCondition].id == promotion.id) {\n        const condition: MasterCondtions = {\n          product_id: conditions[idxCondition].product_id,\n          special_type: conditions[idxCondition].special_type,\n          special_num: conditions[idxCondition].special_num,\n        };\n        result.push(condition);\n        idxCondition++;\n      } else {\n        break;\n      }\n    }\n    return [idxCondition, result];\n  }\n\n  public async getTemplatesData(\n    idxTemplate: number,\n    idxTemplateDetail: number,\n    templates: Array<MasterTemplates>,\n    templatesDetail: Array<MasterTemplateDetails>,\n    promotion: MasterPromotions,\n  ): Promise<[number, number, Array<MasterTemplates>]> {\n    // match between promotion and templates\n    const result: Array<MasterTemplates> = [];\n\n    while (idxTemplate < templates.length) {\n      const details: Array<MasterTemplateDetails> = [];\n      while (idxTemplateDetail < templatesDetail.length) {\n        if (templatesDetail[idxTemplateDetail].promotion_template_id == templates[idxTemplate].promotion_template_id) {\n          const detail: MasterTemplateDetails = {\n            type: templatesDetail[idxTemplateDetail].type,\n            text_detail: templatesDetail[idxTemplateDetail].text_detail,\n            text_font: templatesDetail[idxTemplateDetail].text_font,\n          };\n          details.push(detail);\n          idxTemplateDetail++;\n        } else {\n          break;\n        }\n      }\n      if (templates[idxTemplate].id == promotion.id) {\n        const template: MasterTemplates = {\n          type: templates[idxTemplate].type,\n          type_detail: templates[idxTemplate].type_detail,\n          line_type: templates[idxTemplate].line_type,\n          detail: details,\n        };\n        result.push(template);\n        idxTemplate++;\n      } else {\n        break;\n      }\n    }\n\n    return [idxTemplate, idxTemplateDetail, result];\n  }\n\n  public async syncMasterData(stationId: BigInt): Promise<ResponsePattern> {\n    try {\n      const pool = new PGPool();\n      const station: ResponsePattern = await this.stationService.readStation(stationId, 'id, code, name_th, name_en');\n\n      if (station.statusCode === 404) {\n        return { statusCode: 404, message: message.errors.notFound };\n      }\n\n      const usersSQL = await pool.aquery(\n        `SELECT U.username,U.password,U.password_mobile_pos,U.name,U.phone_number,R.name AS role_name\n        FROM tbl_users AS U\n        INNER JOIN tbl_roles AS R ON R.id = U.role_id\n        WHERE U.station_id = '${stationId}'\n        ORDER BY U.id ASC`,\n      );\n\n      const products: ResponsePattern = await this.productService.listProductByStation(stationId, 'P.code, P.name');\n\n      const promotionsSQL = await pool.aquery(\n        `SELECT PRO.id, PRO.code, PRO.name, PRO.start_date, PRO.end_date, PRO.condition_type,\n                PRO.start_price, PRO.end_price, PRO.use_num, PRO.use_max, PRO.priority, PRO.child_id\n        FROM tbl_promotions AS PRO\n        INNER JOIN tbl_sync_promotions_detail AS SPRO ON SPRO.promotion_id = PRO.id\n        WHERE SPRO.station_id = '${stationId}'\n        GROUP BY PRO.id\n        ORDER BY PRO.id ASC`,\n      );\n\n      const conditionsSQL = await pool.aquery(\n        `SELECT PRO.id, PROC.product_id, PROC.special_type, PROC.special_num\n        FROM tbl_promotions AS PRO\n        INNER JOIN tbl_sync_promotions_detail AS SPRO ON SPRO.promotion_id = PRO.id\n        INNER JOIN tbl_promotions_has_condition AS PROC ON PROC.promotion_id = PRO.id\n        WHERE SPRO.station_id = '${stationId}'\n        GROUP BY PRO.id, PROC.product_id, PROC.special_type, PROC.special_num ORDER BY PRO.id ASC`,\n      );\n\n      const templatesSQL = await pool.aquery(\n        `SELECT PRO.id, PROT.id as promotion_template_id, PROT.type, PROT.type_detail, PROT.line_type\n        FROM tbl_promotions AS PRO\n        INNER JOIN tbl_sync_promotions_detail AS SPRO ON SPRO.promotion_id = PRO.id\n        INNER JOIN tbl_promotions_template AS PROT ON PROT.promotion_id = PRO.id\n        WHERE SPRO.station_id = '${stationId}'\n        GROUP BY PRO.id, PROT.id, PROT.type, PROT.type_detail, PROT.line_type\n        ORDER BY PRO.id, PROT.id ASC`,\n      );\n\n      const templatesDetailSQL = await pool.aquery(\n        `SELECT PRO.id, PROT.id as promotion_template_id, TD.type, TD.text_detail, TD.text_font\n        FROM tbl_promotions_template AS PROT\n        INNER JOIN tbl_promotions AS PRO ON PROT.promotion_id = PRO.id\n        INNER JOIN tbl_sync_promotions_detail AS SPRO ON SPRO.promotion_id = PRO.id\n        LEFT JOIN tbl_template_detail AS TD ON TD.promotion_template_id = PROT.id\n        WHERE SPRO.station_id = 1\n        GROUP BY PRO.id, PROT.id, PROT.type, PROT.type_detail, PROT.line_type,\n        TD.type, TD.text_detail, TD.text_font\n        ORDER BY PRO.id, promotion_template_id ASC`,\n      );\n\n      const users: Array<MasterUsers> = usersSQL.rows;\n\n      const promotions: Array<MasterPromotions> = promotionsSQL.rows;\n      const conditions: Array<MasterCondtions> = conditionsSQL.rows;\n      const templates: Array<MasterTemplates> = templatesSQL.rows;\n      const templatesDetail: Array<MasterTemplateDetails> = templatesDetailSQL.rows;\n\n      let idxCondition = 0;\n      for (let i = 0; i < promotions.length; i++) {\n        [idxCondition, promotions[i].conditions] = await this.getConditionsData(idxCondition, conditions, promotions[i]);\n      }\n\n      let idxTemplate = 0;\n      let idxTemplateDetail = 0;\n      for (let i = 0; i < promotions.length; i++) {\n        [idxTemplate, idxTemplateDetail, promotions[i].templates] = await this.getTemplatesData(\n          idxTemplate,\n          idxTemplateDetail,\n          templates,\n          templatesDetail,\n          promotions[i],\n        );\n      }\n\n      const data: MasterData = {\n        station: station.data,\n        users,\n        products: products.data,\n        promotions,\n      };\n\n      return { statusCode: 200, message: message.success.ok, data };\n    } catch (e) {\n      console.log(e);\n      return { statusCode: 500, message: message.errors.internal };\n    }\n  }\n}\n\nexport default MasterService;\n"],"names":["MasterService","getConditionsData","idxCondition","conditions","promotion","result","length","id","condition","product_id","special_type","special_num","push","getTemplatesData","idxTemplate","idxTemplateDetail","templates","templatesDetail","details","promotion_template_id","detail","type","text_detail","text_font","template","type_detail","line_type","syncMasterData","stationId","pool","PGPool","station","stationService","readStation","statusCode","message","errors","notFound","usersSQL","aquery","products","productService","listProductByStation","promotionsSQL","conditionsSQL","templatesSQL","templatesDetailSQL","users","rows","promotions","i","data","success","ok","e","console","log","internal","ProductService","StationService"],"mappings":"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"}