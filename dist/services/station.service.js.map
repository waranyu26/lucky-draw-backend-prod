{"version":3,"sources":["../../src/services/station.service.ts"],"sourcesContent":["import { message } from '@/constants/messages';\nimport PGPool from '@/db_pool/pg_pool';\n\nimport { MobilePos, MobilePosOnStation } from '@/interfaces/mobile_pos.interface';\nimport { ProductOnStation } from '@/interfaces/product.interface';\nimport { ResponsePattern } from '@/interfaces/response.interface';\nimport { Station } from '@/interfaces/station.interface';\n\nimport MobilePosService from './mobile_pos.service';\nimport ProductService from './product.service';\n\nclass StationService {\n  public productService = new ProductService();\n  public mobilePosService = new MobilePosService();\n\n  public async createStation(): Promise<void> {\n    const pool = new PGPool();\n  }\n\n  public async readStation(station_id: BigInt, column?: string): Promise<ResponsePattern> {\n    try {\n      const pool = new PGPool();\n      if (!column) column = '*';\n      const station = await pool.aquery(`SELECT ${column} FROM tbl_station WHERE id = '${station_id}'`);\n      if (station.rowCount === 0) return { statusCode: 404, message: message.errors.notFound };\n      return { statusCode: 200, message: message.success.ok, data: station.rows[0] };\n    } catch (e) {\n      console.log(e);\n      return { statusCode: 500, message: message.errors.internal };\n    }\n  }\n\n  public async listStation(page, limit, sort, order) {\n    try {\n      page = isNaN(parseInt(page)) ? 1 : page;\n      limit = isNaN(parseInt(limit)) ? 20 : limit;\n      order = order.toUpperCase() === 'ASC' || order.toUpperCase() === 'DESC' ? order : 'ASC';\n\n      const pool = new PGPool();\n\n      const stationsSelect = `SELECT id, code, name_th, name_en, status FROM tbl_station\n      ORDER BY ${sort} ${order} LIMIT ${limit} OFFSET ${(page - 1) * limit}`;\n\n      const stationsSQL = await pool.aquery(stationsSelect);\n      const stations: Array<Station> = stationsSQL.rows;\n\n      // select product in stationSelect.\n      const productsSQL = await pool.aquery(\n        `SELECT S.id AS station_id, P.id, P.code, P.name, P.image FROM tbl_products AS P\n        INNER JOIN tbl_station_has_product AS SHP ON SHP.product_id = P.id\n        INNER JOIN (${stationsSelect}) AS S ON SHP.station_id = S.id`,\n      );\n      const productGroup: Array<ProductOnStation> = productsSQL.rows;\n      const productGroupResult: Object = this.productService.groupProduct(productGroup);\n\n      // select mobilePos in stationsSelect.\n      const mobilePosSQL = await pool.aquery(\n        `SELECT MP.id, MP.station_id, MP.name, MP.series_number, MP.status\n        FROM tbl_mobile_pos AS MP\n        INNER JOIN (${stationsSelect}) AS S ON MP.station_id = S.id`,\n      );\n      const mobilePosGroup: Array<MobilePosOnStation> = mobilePosSQL.rows;\n      const mobilePosGropResult: Object = this.mobilePosService.gropMobilePos(mobilePosGroup);\n\n      // group all datas.\n      const stationAllData: Array<Station> = [];\n      const staionsLength = stations.length;\n      for (let i = 0; i < staionsLength; i++) {\n        const stationId = stations[i].id.toString();\n        const data: Station = {\n          id: stations[i].id,\n          code: stations[i].code,\n          name_th: stations[i].name_th,\n          name_en: stations[i].name_en,\n          status: stations[i].status,\n          products: productGroupResult[stationId] ? productGroupResult[stationId]['products'] : [],\n          mobile_pos: mobilePosGropResult[stationId] ? mobilePosGropResult[stationId]['mobile_pos'] : [],\n        };\n        stationAllData.push(data);\n      }\n\n      return { statusCode: 200, message: message.success.ok, data: stationAllData };\n    } catch (e) {\n      console.log(e);\n      return { statusCode: 500, message: message.errors.internal };\n    }\n  }\n\n  public async updateStation() {\n    const pool = new PGPool();\n  }\n\n  public async deleteStation() {\n    const pool = new PGPool();\n  }\n}\n\nexport default StationService;\n"],"names":["StationService","createStation","pool","PGPool","readStation","station_id","column","station","aquery","rowCount","statusCode","message","errors","notFound","success","ok","data","rows","e","console","log","internal","listStation","page","limit","sort","order","isNaN","parseInt","toUpperCase","stationsSelect","stationsSQL","stations","productsSQL","productGroup","productGroupResult","productService","groupProduct","mobilePosSQL","mobilePosGroup","mobilePosGropResult","mobilePosService","gropMobilePos","stationAllData","staionsLength","length","i","stationId","id","toString","code","name_th","name_en","status","products","mobile_pos","push","updateStation","deleteStation","ProductService","MobilePosService"],"mappings":"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"}