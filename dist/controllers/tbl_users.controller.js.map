{"version":3,"sources":["../../src/controllers/tbl_users.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport PGPool from '@/db_pool/pg_pool';\nimport usersService from '@/services/tbl_users.service';\nimport {tableUser } from '@/interfaces/tbl_user.interface';\nimport bcrypt from 'bcrypt';\nimport { message } from '@/constants/messages';\n\n\nclass tableUsersController {\n    public usersService = new usersService();\n    private pool = new PGPool();\n\n    public test(req, res, next) {\n\n        res.setHeader('Content-Type', 'application/json');\n        return res.send(JSON.stringify({\n            status: 200,\n            message: 'test ctrl',\n        }));\n    }\n\n    public getUsers = async (req, res, next): Promise<void> => {\n        try {\n            const data = await this.usersService.findAllUsers()\n            return res.send(await data);\n\n        } catch (error) {\n          next(error);\n        }\n      };\n    \n      public getUserById = async (req, res, next): Promise<void> => {\n        try {\n            const data = await this.usersService.findUserById(req.params.id)\n            return res.send(await data);\n\n        } catch (error) {\n          next(error);\n        }\n      };\n    \n      public createUser = async (req, res, next) => {\n        \n        try {\n            const parseUserProfile = async (req) => {\n                let salt = await bcrypt.genSalt(10)\n                let hashed = await bcrypt.hash(req.body.password, salt);\n                return {\n                    id: req.body.id,\n                    username: req.body.username,\n                    password: hashed,\n                    name: req.body.name,\n                    phone_number: req.body.phone_number,\n                    role_id: req.body.role_id,\n                    station_id: req.body.station_id,\n                    password_mobile_pos: req.body.password_mobile_pos\n                }\n            }\n            \n            const userProfile = await parseUserProfile(req)\n            const duplicateAddCheck = await this.usersService.duplicateAddCheck(userProfile)\n            if (duplicateAddCheck != null) {\n                return res.send(duplicateAddCheck)\n            }\n\n            const data = this.usersService.createUser(userProfile)\n            return res.send(await data);\n            \n        } catch (error) {\n          next(error);\n        }\n      };\n    \n      public updateUser = async (req, res, next): Promise<void> => {\n        try {\n            const conflictCheck = await this.usersService.conflictUpdateCheck(req.params.id, req.body)\n            if (conflictCheck != null) {\n                return res.send(conflictCheck)\n            }\n\n            const genHash = async (password) => {\n                let salt = await bcrypt.genSalt(10)\n                return await bcrypt.hash(req.body.password, salt);\n            }\n            \n            const parseChanges = async (req) => {\n                let t_string = ``\n                let count = 0                \n\n                for (let field in req.body) {\n                    let value = await (field == 'password' ? \n                                genHash(req.body[field]) : req.body[field])\n                    let adder = isNaN(value) ? `'${value}'` : `${value}`\n                    t_string += `${field} = ${adder}, `\n                    count += 1\n                }\n\n                if (count != 0) {\n                    t_string = t_string.slice(0, -2)\n                }\n                \n                console.log(t_string)\n                return t_string\n            }\n\n            const changes = await parseChanges(req)\n            const data = this.usersService.updateUser(req.params.id, changes)\n            return res.send(await data);\n        } catch (error) {\n          next(error);\n        }\n      };\n    \n      public deleteUser = async (req, res, next) => {\n        try {\n            const data = await this.usersService.deleteUser(req.params.id)\n            return res.send(await data);\n\n        } catch (error) {\n          next(error);\n        }\n      };\n}\n\nexport default tableUsersController;"],"names":["tableUsersController","test","req","res","next","setHeader","send","JSON","stringify","status","message","usersService","pool","PGPool","getUsers","data","findAllUsers","error","getUserById","findUserById","params","id","createUser","parseUserProfile","salt","bcrypt","genSalt","hashed","hash","body","password","username","name","phone_number","role_id","station_id","password_mobile_pos","userProfile","duplicateAddCheck","updateUser","conflictCheck","conflictUpdateCheck","genHash","parseChanges","t_string","count","field","value","adder","isNaN","slice","console","log","changes","deleteUser"],"mappings":"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"}