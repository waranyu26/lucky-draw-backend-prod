{"version":3,"sources":["../../src/controllers/station.controller.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport { ResponsePattern } from '@/interfaces/response.interface';\nimport { message } from '@/constants/messages';\n\nimport StationService from '@/services/station.service';\nimport ProductService from '@/services/product.service';\nimport MobilePosService from '@/services/mobile_pos.service';\nimport { STATUS_CODES } from 'http';\n\nclass StationController {\n  public stationService = new StationService();\n  public productService = new ProductService();\n  public mobliePosService = new MobilePosService();\n\n  public readStation = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const stationId = BigInt(req.params.id);\n      const station: ResponsePattern = await this.stationService.readStation(stationId, 'id, code, name_th, name_en');\n      if (station.statusCode !== 200) res.status(station.statusCode).json({ statusCode: station.statusCode, message: station.message });\n\n      const products: ResponsePattern = await this.productService.listProductByStation(stationId, 'P.id, P.code, P.image, P.name');\n      if (products.statusCode === 500) res.status(500).json({ statusCode: 500, message: message.errors.internal });\n\n      const mobilePosRows: ResponsePattern = await this.mobliePosService.listMobilePosByStation(stationId, 'name, series_number, status');\n      if (mobilePosRows.statusCode === 500) res.status(500).json({ statusCode: 500, message: message.errors.internal });\n\n      const data = {\n        station: station.data,\n        products: products.data,\n        mobile_pos_collection: mobilePosRows.data,\n      };\n\n      const response: ResponsePattern = { statusCode: 200, data, message: message.success.ok };\n\n      res.status(response.statusCode).json(response);\n    } catch (e) {\n      console.log(e);\n      res.status(400).json({ statusCode: 400, message: message.errors.badRequest });\n    }\n  };\n\n  public createStation = async () => {};\n\n  public listStation = async (req: Request, res: Response): Promise<void> => {\n    const { page, limit, sort, order } = req.query;\n    try {\n      // if (isNaN(parseInt(page))) res.status(400).json({ statusCode: 400, message: 'page must be a number!'})\n      const test = await this.stationService.listStation(page, limit, sort, order);\n      res.status(200).json(test);\n    } catch (e) {\n      throw e;\n    }\n  };\n}\n\nexport default StationController;\n"],"names":["StationController","stationService","StationService","productService","ProductService","mobliePosService","MobilePosService","readStation","req","res","stationId","BigInt","params","id","station","statusCode","status","json","message","products","listProductByStation","errors","internal","mobilePosRows","listMobilePosByStation","data","mobile_pos_collection","response","success","ok","e","console","log","badRequest","createStation","listStation","page","limit","sort","order","query","test"],"mappings":"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"}