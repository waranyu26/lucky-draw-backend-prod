{"version":3,"sources":["../src/app.ts"],"sourcesContent":["import compression from 'compression';\nimport cookieParser from 'cookie-parser';\nimport cors from 'cors';\nimport express from 'express';\nimport helmet from 'helmet';\nimport hpp from 'hpp';\nimport morgan from 'morgan';\nimport swaggerJSDoc from 'swagger-jsdoc';\nimport swaggerUi from 'swagger-ui-express';\nimport { NODE_ENV, PORT, LOG_FORMAT, ORIGIN, CREDENTIALS } from '@config';\nimport { Routes } from '@interfaces/routes.interface';\nimport errorMiddleware from '@middlewares/error.middleware';\nimport { logger, stream } from '@utils/logger';\nimport PGPool from './db_pool/pg_pool';\n\nimport passport from 'passport';\nimport initializePassport from '@/passport/passport-config.js';\nimport flash from 'express-flash';\nimport session from 'express-session';\nimport crypto from 'crypto';\nimport { randomBytes } from 'crypto';\n\nclass App {\n  public app: express.Application;\n  public env: string;\n  public port: string | number;\n\n  constructor(routes: Routes[]) {\n    this.app = express();\n    this.env = NODE_ENV || 'development';\n    this.port = PORT || 3000;\n\n    this.initializePassportLib();\n    this.initializeMiddlewares();\n    this.initializeRoutes(routes);\n    this.initializeDatabase();\n    this.initializeSwagger();\n    this.initializeErrorHandling();\n  }\n\n  public listen() {\n    this.app.listen(this.port, () => {\n      logger.info(`=================================`);\n      logger.info(`======= ENV: ${this.env} =======`);\n      logger.info(`ðŸš€ App listening on the port ${this.port}`);\n      logger.info(`=================================`);\n    });\n  }\n\n  public getServer() {\n    return this.app;\n  }\n\n  private initializeMiddlewares() {\n    this.app.use(morgan(LOG_FORMAT, { stream }));\n    this.app.use(cors({ origin: ORIGIN, credentials: CREDENTIALS }));\n    this.app.options('*', cors())\n    this.app.use(hpp());\n    this.app.use(helmet());\n    this.app.use(compression());\n    this.app.use(express.json());\n    this.app.use(express.urlencoded({ extended: true }));\n    this.app.use(cookieParser());\n  }\n\n  private initializeDatabase() {\n    try {\n      const pool = new PGPool();\n      this.app.set('dbPool', pool);\n      logger.info('Database connection was successful');\n    } catch (e) {\n      logger.info('ERROR: Database connection failed');\n      throw e;\n    }\n  }\n\n  private initializeRoutes(routes: Routes[]) {\n\n    // ================== requirement from passport\n    // inint should before route\n    this.app.use(passport.initialize())\n    this.app.use(passport.session())\n\n    routes.forEach(route => {\n      this.app.use('/', route.router);\n    });\n  }\n\n  private initializeSwagger() {\n    const options = {\n      swaggerDefinition: {\n        info: {\n          title: 'REST API',\n          version: '1.0.0',\n          description: 'Example docs',\n        },\n      },\n      apis: ['swagger.yaml'],\n    };\n\n    const specs = swaggerJSDoc(options);\n    this.app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs));\n  }\n\n  private initializeErrorHandling() {\n    this.app.use(errorMiddleware);\n  }\n\n  private async initializePassportLib() {\n\n    const pool = new PGPool();\n\n    initializePassport(\n      passport, \n      async (moderator) => {\n        const userProfile = await pool.aquery(`\n          SELECT * FROM tbl_users as U \n          WHERE U.username = '${moderator}' AND\n                U.role_id != 1\n        `)\n\n        return userProfile.rows[0]\n      },\n\n      async (cashier, serialNumber) => {\n        const tempStationID = await pool.aquery(`\n        SELECT station_id FROM tbl_mobile_pos\n        WHERE series_number = '${serialNumber}'       \n        `)\n        console.log(`\n        SELECT station_id FROM tbl_mobile_pos\n        WHERE series_number = '${serialNumber}'       \n      `)\n        const stationID = Number(tempStationID.rows[0].station_id)\n        console.log(stationID)\n        const cashierProfile = await pool.aquery(`\n          SELECT * FROM tbl_users as U \n          WHERE U.username = '${cashier}' AND\n                U.role_id = 1 AND\n                U.station_id = ${stationID}\n        `)\n        \n        return cashierProfile.rows[0]\n      },\n      \n      async (id) => {\n        const userProfile = await pool.aquery(`\n          SELECT * FROM tbl_users as U \n          WHERE U.id = '${id}'\n        `)\n\n        return userProfile.rows[0]\n      }\n    )\n    \n    this.app.use(flash())\n    this.app.use(session({\n      // genid: function(req) {\n      //   return crypto.randomUUID(); // use UUIDs for session IDs\n      // },\n      secret: process.env.SESSION_SECRET,\n      resave: false,\n      saveUninitialized: false,\n      // milisecond \n      // this case is 30 days\n      cookie:{_expires : 30 * 24 * 60 * 60 * 1000},\n    }))\n  }\n}\n\nexport default App;"],"names":["App","listen","app","port","logger","info","env","getServer","initializeMiddlewares","use","morgan","LOG_FORMAT","stream","cors","origin","ORIGIN","credentials","CREDENTIALS","options","hpp","helmet","compression","express","json","urlencoded","extended","cookieParser","initializeDatabase","pool","PGPool","set","e","initializeRoutes","routes","passport","initialize","session","forEach","route","router","initializeSwagger","swaggerDefinition","title","version","description","apis","specs","swaggerJSDoc","swaggerUi","serve","setup","initializeErrorHandling","errorMiddleware","initializePassportLib","initializePassport","moderator","userProfile","aquery","rows","cashier","serialNumber","tempStationID","console","log","stationID","Number","station_id","cashierProfile","id","flash","secret","process","SESSION_SECRET","resave","saveUninitialized","cookie","_expires","constructor","NODE_ENV","PORT"],"mappings":"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"}